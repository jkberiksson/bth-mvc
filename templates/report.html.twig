{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="report">
    <h1>Report</h1>
    <div class="report-content">
        <div class="report-nav">
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom0710">Kmom07/10</a></li>
            </ul>
        </div>
        <div class="report-answers">
            <div id="kmom01">
                <h3>Kmom01</h3>
                <h4>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h4>
                <p>objektorienterad programmering är inget nytt ämne. I föregående läsperiod läste vi objektorienterad 
                python så själva tänket i sig är inget nytt. Jag har dock inte bestämt vad jag tycker om det. 
                Ibland gillar jag det, ibland inte. Jag står någonstans mittemellan.</p>
                <h4>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h4>
                <p>Det första man behöver känna till är hur man skapar en klass och därifrån instansierar nya objekt av klassen. Attribut och metoder behöver man veta om också. 
                Dessutom dess synlighet. I php finns det tre typer av synligheter: public, private, protected.</p>
                <h4>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h4>
                <p>Omfattande. Jag har kikat lite på en del olika ramverk tidigare och är införstådd med att det blir en hel del filer och mappar. Men Symfony är nog det ramverk 
                som jag stött på som innehåller flest filer än så länge. Utan att veta exakt vad varje fil gör så kan jag dock tänka mig att det är
                många filer som är "set and forget". Det är iallafall min känsla. Men det kan snabbt bli rörigt om man inte har bra struktur.</p>
                <h4>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h4>
                <p>Nu har jag inte hunnit läsa igenom hela artikeln men om vi tar det i början så skulle jag vilja nämna namespace, composer och templating. Precis som det skrivs i artikeln, att man kan ha funktioner med samma namn så länge man har dom i olika namespace.
                Composer är också något jag tycker är bra. Stöter jag på något problem är sannolikheten ganska stor att någon annan stött på samma sak. Att då kunna installera paket som kan lösa problemet utan att jag behöver skriva koden(sålänge man förstår vad som händer) är positivt. 
                Och sen templating, som i vårt fall är twig. Underlättar något otroligt när man kan använda sina variabler direkt i sin HTML.</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>TIL för detta kmom får bli Symfony. Nu har jag lärt mig långt ifrån allt. Men det är ändå kul att komma närmare verkligheten då jag förstått att många applikationer är skrivna i olika ramverk.</p>
            </div>
            <div id="kmom02">
                <h3>Kmom02</h3>
                <h4>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h4>
                <p>Arv är när en klass ärver egenskaper från en annan klass. Dvs, man kan komma åt och använda förälderns metoder och attribut. Komposition är när en klass inehåller instanser av en annan klass. Interface är en abstrakt typ som definierar egenskaper som en klass måste innehålla. Trait är ett sätt att återanvända kod i flera klasser utan att behöva använda sig av arv. Man skapar helt enkelt ett trait som innehåller metoder som flera klasser sen kan återanvända.</p>
                <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h4>
                <p>Jag har löst uppgiften genom att skapa tre klasser. Card, DeckOfCards och DeckOfCardsWithJoker, där withJoker ärver från DeckOfCards. Implementationen av klasserna är jag nöjd med och tycker inte det var supersvårt. Dock känns det som det finns tusen olika sätt att implementera allt på vilket ibland ställer till det för mig. Då blir det lätt att jag övertänker hur jag ska göra. Sen är jag inte riktigt kompis med symfony än, även om det börjar sätta sig mer och mer. Jag upplever det som svårt att hålla reda på allt. Det är väldigt mycket filer hit och dit. Möjligt att jag kanske kan strukturera om det lite grann. Får kika på det tills nästa kmom.</p>
                <h4>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h4>
                <p>Än så länge har jag inte riktigt kommit in i det. "V":et är inga problem, där är jag med. Det jag har lite problem med är "C":et. Sen kan jag erkänna att jag har svårt för php överlag vilket inte underlättar. Jag tycker det är lite för krångligt men jag antar att det är en vanesak också. Men ett exempel är pil-nationen. Varför inte bara köra på "." som i tex JS.</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>Lärt mig mer om hur klasser fungerar i PHP. Även lite nya symfony-delar.</p>
            </div>
            <div id="kmom03">
                <h3>Kmom03</h3>   
                <h4>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h4>
                <p>Jag tror absolut att det underlättar för mig. Jag brukar inte planera mina arbeten i förväg utan brukar mest go with the flow. Då blir det lätt att man stöter på problem under resans gång som man hade kunnat slippa om man bara att haft en plan och en struktur kring hur man ska bygga sin app.</p>
                <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h4>
                <p>Spelet i sig fungerar så som jag tänkt mig. Däremot ser jag nu i efterhand att jag hade kunnat strukturera min kod på ett lite annorlunda sätt. T.ex hade jag kunnat ha en klass var för spelare och dealer. Men utöver det så tycker jag att jag lyckats hålla mina controllers relativt små och jag har försökt samla så mycket kod som möjligt i klasserna.</p>
                <h4>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h4>
                <p>Att koda i ramverk är något jag har sett framemot. Jag har exempelvis testat på lite react tidigare vilket jag gillade. Tyvärr har jag dock svårt för symfony. Egentligen har det nog inte med symfony i sig att göra, utan mer php. Programmering handlar ju mycket om att ta sig över första tröskeln, vilket jag inte gjort med php, varför vet jag inte...</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>Får bli lite hur man ska tänka innan man börjar. Den tiden man lägger ner innan på att planera sitt arbete har man ofta igen senare.</p>
            </div>
            <div id="kmom04">
                <h3>Kmom04</h3>
                <h4>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h4>
                <p>Att skriva tester känns ändå som en grej som "måste" göras. Även om det inte är min favoritgrej så tror jag absolut att det kan underlätta hela utvecklingsprocessen. Sen gjorde vi något liknande i oopython och min uppfattning är att det fungerar på ungefär samma sätt.</p>
                <p>Att jobba med phpunit är ju ganska tillfredställande när man kan få en visuell vy över sin kod. Vad den testar och inte testar. Det blir dock lite jobbigt för en som är perfektionist när man ser att allt inte är grönt.</p>
                <h4>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h4>
                <p>Jag lyckades nå 100% på min Card controller och nästan 90% på min blackjack controller. Jag må vara en perfektionist men jag kände ändå att detta är tillräckligt för denna gång. </p>
                <h4>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h4>
                <p>I det stora hela upplever jag att min kod är någorlunda bra skriven vilket också gör den testbar enligt mig. Sen finns det såklart alltid rum för förbättring och det går säkerligen att skriva min kod på minst 10 andra sätt. Något sett kanske ger sämre testbar kod, samtidigt som något sätt kanske ger bättre testbar kod.</p>
                <h4>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h4>
                <p>Jag har inte valt att skriva om min kod nånting. Främst för att jag vill jobba mot det jag har och utgå från det. Jag tror det kan vara bra att göra så för att lära sig så mycket som möjligt även om det kanske inte ger bästa resultat.</p>
                <h4>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h4>
                <p>Överlag tror jag absolut att testbar kod kan tolkas som ren och snygg. Då brukar koden vara välorganiserad och tydlig. Den är förmodligen också uppdelad i små block vilket kan vara enklare att förstå.</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>Det får bli phpdoc och phpunit.</p>
            </div>
            <div id="kmom05">
                <h3>Kmom05</h3>
                <h4>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</h4>
                <p>Jag skulle säga att övningen är väldigt bra upplagd. Den förklarar på ett bra sätt vad som händer och varför. Dessutom tycker jag att den är enkel att överföra till projektet. Mycket av koden går att återanvända i uppgiften.</p>
                <h4>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h4>
                <p>Tyvärr har jag inte kunnat lägga ner så mycket tid som jag velat på design och UX. Jag har varit tvungen att prioritera annat i livet under ett par veckor och därav resultatet. Hursomhelst så är jag relativt nöjd. Applikationen fungerar som den ska i form av routes och knappar. Däremot är väl UI:n lite sisådär.</p>
                <h4>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h4>
                <p>Har man inte superbra koll på SQL så tycker jag att ORM är ett perfekt sätt att interagera med databasen. Här använder man ju funktioner och metoder för att modifiera databasen vilket jag föredrar då jag inte känner att SQL riktigt är min grej. Jag tycker att det är enklare att använda ett ORM än att skriva vanlig SQL. Som programmerare behöver man ju inte heller ha koll på olika språk då man kan skriva all sin kod i php eller vad man nu föredrar. Tex finns ju mongoose för JS så man kan koppla sig mot sin mongodb databas. ÄVen om mongoose inte är exakt samma sak som ett ORM, så är ju principen densamma känns det som.</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>Lärt mig hur man integrerar en databas i symfony. Också hur man jobbar mot den med ett ORM.</p>
            </div>
            <div id="kmom06">
                <h3>Kmom06</h3>
                <h4>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</h4>
                <p>Rörigt. Det är siffror överallt och nya termer vilket gör att det ibland är svårt att förstå vad som är vad. Att man kan se om man har några direkta buggar var väl det jag uppskattade mest. Har man tiden och möjligheten att djupdyka in i metrics så kan jag absolut se att det är värdefullt. Men det känns som att bara det är en halvtidstjänst. Så jag kan vara helt ärlig med att säga att det var inget jag gillade.</p>
                <h4>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</h4>
                <p>Scrutinizer gillar jag betydligt mer än phpmetrics. Min uppfattning är att det är mer raka rör här. Man kopplar sitt repo till tjänsten och sen sköts allting automatiskt när man pushar till github, skönt! Att man dessutom får badges som man kan koppla till sitt repo gör ju att man gärna lägger lite extra kärlek för att få så höga betyg som möjligt. Efter första bygget fick jag en 10:a i betyg och en kodtäckning på 17%(inte jättebra...). Efter jag fixat mina issues och lite andra småbuggar så har jag lyckats gå från en 10:a till 9,95. Känns ju sådär när man trodde att man bara gjort förbättringar i sin kod. Däremot ökade kodtäckning en aning. Med det sagt så kan man väl dra slutsatsen att det inte alltid blir ett bättre betyg bara för att man lägger ner mer tid och kraft på att skriva bättre kod.</p>
                <h4>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</h4>
                <p>Om verktygen används på rätt sätt tror jag absolut att det kan ge bättre kod. Som i vårt fall när vi implementerat phpmetrics och scrutinizer nu i slutet av kursen tror jag att det kan ställa till mer än vad det gör nytta. Jag kan bara prata utifrån mig själv men jag tyckte att jag hade helt okej skriven kod och det kanske även visade sig i rapporterna men jag insåg ju också att det fanns utrymme för förbättring. Ju längre in i sitt projekt man är, desto svårare tror jag det blir att förhålla sig till olika regler och verktyg om man inte implementerat dom från början. Däremot, är man ett stort team som jobbar på samma projekt och har allt uppsatt från början, så man kan köra sina verktyg lite allteftersom man gjort en uppdatering, så tror jag bara att det är positivt.</p>
                <h4>Vilken är din TIL för detta kmom?</h4>
                <p>Till för detta kmom får bli scrutinizer. Än så länge har jag, för det mesta, bara positiva tankar om det verktyget.</p>
            </div>
            <div id="kmom0710">
                <h3>Kmom07/10</h3>
            </div>
        </div>
    </div>
</div>
{% endblock %}